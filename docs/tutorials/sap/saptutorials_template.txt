.. _sap10_tutorials:

SAP10 Tutorials
===============

.. _running_a_sap10_calculation:

Running a SAP10 calculation
-----------------------------

An SAP10 calculation can be run using:

.. code-block:: Python

   # __CODE1__

This uses the :py:func:`sap10calcs.calculate` function:

- ``input_file`` is an SAP10 XML file provided by the user and stored on the local computer.
- ``auth_token`` is an authorization token for the remote API service provided by the user (see `here <https://netzeroapis.com/redoc#section/Authorization>`__ for details).
- ``result`` is a Python dictionary which contains the final SAP calculated values (such as energy consumption and the SAP rating), the intermediate calculations and any error messages.

In practice, I would use this in a wider function that also saves the complete output of the :py:func:`sap10calcs.calculate` function and prints out any error message. This might look like:

..  code-block:: Python

    # __CODE2__

.. _editing_an_existing_sap_xml_file:

Editing an existing SAP XML input file
----------------------------------------

This code uses the :py:func:`sap10calcs.parse_xml` function to read an SAP XML file. It then updates the postcode and the percentage of living area, and saves the XML file with a new name.

.. code-block:: Python

   # __CODE4__

.. _creating_a_sap_xml_input_file_from_scratch:

Creating a SAP XML input file from scratch
--------------------------------------------

This code uses the :py:func:`sap10calcs.create_sap_report_xml` function to create an empty :py:class:`~sap10calcs.classes_SAP_Schema_19_1_0.SAP_Report` object, and then uses the object properties and methods to create a complete SAP input XML file.

..  code-block:: python

    # __CODE3__

This creates the following XML file (shown below using the :py:func:`display` function):

..  code-block:: XML

    # __OUTPUT1__